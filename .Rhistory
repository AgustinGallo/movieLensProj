left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
RMSE <- rmse(validation$rating,predicted_ratings) ## Small improvement 0.8643
## Now using penalized least squares, with penalty term Lambda
lambdas <- seq(0,10,0.25)
mu <- mean(train_set$rating)
rmses <- sapply(lambdas, function(l){
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
user_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId')%>%
group_by(userId) %>%
summarize(b_u = sum(rating- mu - b_i)/(n()+l))
genres_avg<-train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
group_by(genres) %>%
summarize(b_g = sum(rating - mu - b_i - b_u)/(n()+l))
predicted_ratings <-
train_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
return (rmse(train_set$rating,predicted_ratings))
})
qplot(lambdas, rmses)
lambda <- lambdas[which.min(rmses)] # Best Lambda is 4.75
qplot(lambdas, rmses)
lambda <- lambdas[which.min(rmses)] # Best Lambda is 4.75
#Final model will be
l <- lambda
lambdas <- seq(-2,2,0.25)
mu <- mean(train_set$rating)
rmses <- sapply(lambdas, function(l){
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
user_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId')%>%
group_by(userId) %>%
summarize(b_u = sum(rating- mu - b_i)/(n()+l))
genres_avg<-train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
group_by(genres) %>%
summarize(b_g = sum(rating - mu - b_i - b_u)/(n()+l))
predicted_ratings <-
train_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
return (rmse(train_set$rating,predicted_ratings))
})
qplot(lambdas, rmses)
lambda <- lambdas[which.min(rmses)] # Best Lambda is 4.75
lambdas <- seq(0,2,0.1)
mu <- mean(train_set$rating)
rmses <- sapply(lambdas, function(l){
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
user_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId')%>%
group_by(userId) %>%
summarize(b_u = sum(rating- mu - b_i)/(n()+l))
genres_avg<-train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
group_by(genres) %>%
summarize(b_g = sum(rating - mu - b_i - b_u)/(n()+l))
predicted_ratings <-
train_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
return (rmse(train_set$rating,predicted_ratings))
})
qplot(lambdas, rmses)
lambda <- lambdas[which.min(rmses)] # Best Lambda is 4.75
lambdas <- seq(0,10,0.25)
mu <- mean(train_set$rating)
rmses <- sapply(lambdas, function(l){
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
user_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId')%>%
group_by(userId) %>%
summarize(b_u = sum(rating- mu - b_i)/(n()+l))
genres_avg<-train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
group_by(genres) %>%
summarize(b_g = sum(rating - mu - b_i - b_u)/(n()+l))
predicted_ratings <-
validation_clean %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
return (rmse(validation_clean$rating,predicted_ratings))
})
qplot(lambdas, rmses)
lambda <- lambdas[which.min(rmses)] # Best Lambda is 4.75
##Plots to sustain this
#Movies
mu <- mean(train_set$rating)
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(b_i = mean(rating - mu), n_i = n())
qplot(b_i, data = movie_avgs, bins = 16, color = I("black"))
# User
train_set %>%
group_by(userId) %>%
filter(n()>=100) %>%
summarize(b_u = mean(rating), n_u = n()) %>%
ggplot(aes(b_u)) +
geom_histogram(bins = 30, color = "black")
user_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId')%>%
group_by(userId) %>%
summarize(b_u = mean(rating- mu - b_i))
# Genres
train_set %>%
group_by(genres) %>%
filter(n()>=100) %>%
summarize(b_g = mean(rating), n_g = n()) %>%
ggplot(aes(b_g)) +
geom_histogram(bins = 15, color = "black")
genres_avg<-train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
group_by(genres) %>%
summarize(b_g = mean(rating - mu - b_i - b_u))
# Timestamp -> Very low importance, not to take into account, try it by year, week day, month
train_set %>%
group_by(weekdays(as_datetime(timestamp))) %>%
filter(n()>=100) %>%
summarize(b_t = mean(rating)) %>%
ggplot(aes(b_t)) +
geom_histogram(bins = 35, color = "black")
## Making prediction
predicted_ratings <- validation %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
rmse(validation$rating, predicted_ratings) ## Obtained 0.8647, pretty good, yeii
lambdas <- seq(0,10,0.25)
mu <- mean(train_set$rating)
rmses <- sapply(lambdas, function(l){
predicted_ratings <-
validation_clean %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = (mu + b_i + b_u + b_g) /(n_i + n_u + n_g + l) ) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
return (rmse(validation_clean$rating,predicted_ratings))
})
qplot(lambdas, rmses)
lambda <- lambdas[which.min(rmses)] # Best Lambda is 4.75
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(b_i = mean(rating - mu), n_i = n())
user_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId')%>%
group_by(userId) %>%
summarize(b_u = mean(rating- mu - b_i), n_u = n())
genres_avg<-train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
group_by(genres) %>%
summarize(b_g = mean(rating - mu - b_i - b_u), n_g = n())
predicted_ratings <- validation %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
rmse(validation$rating, predicted_ratings) ## Obtained 0.8647, pretty good, yeii
lambdas <- seq(0,10,0.25)
mu <- mean(train_set$rating)
rmses <- sapply(lambdas, function(l){
predicted_ratings <-
validation_clean %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = (mu + b_i + b_u + b_g) /(n_i + n_u + n_g + l) ) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
return (rmse(validation_clean$rating,predicted_ratings))
})
qplot(lambdas, rmses)
lambda <- lambdas[which.min(rmses)] # Best Lambda is 4.75
lambdas <- seq(0,10,0.25)
mu <- mean(train_set$rating)
rmses <- sapply(lambdas, function(l){
predicted_ratings <-
validation_clean %>%
left_join(movie_avgs, by='movieId') %>%
mutate(b_i = b_i/(n_i+l)) %>%
left_join(user_avg, by='userId') %>%
mutate(b_u = b_u/(n_u+l)) %>%
left_join(genres_avg, by='genres') %>%
mutate(b_g = b_g/(n_g+l)) %>%
mutate(pred = (mu + b_i + b_u + b_g) ) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
return (rmse(validation_clean$rating,predicted_ratings))
})
qplot(lambdas, rmses)
lambda <- lambdas[which.min(rmses)] # Best Lambda is 4.75
lambdas <- seq(0,3,0.05)
mu <- mean(train_set$rating)
rmses <- sapply(lambdas, function(l){
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
user_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId')%>%
group_by(userId) %>%
summarize(b_u = sum(rating- mu - b_i)/(n()+l))
genres_avg<-train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
group_by(genres) %>%
summarize(b_g = sum(rating - mu - b_i - b_u)/(n()+l))
predicted_ratings <-
train_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
return (rmse(train_set$rating,predicted_ratings))
})
qplot(lambdas, rmses)
lambda <- lambdas[which.min(rmses)] # Best Lambda is 4.75
qplot(lambdas, rmses, color = "black", fill = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
qplot(lambdas, rmses, color = "black", fill = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
#Final model will be
l <- lambda
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
user_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId')%>%
group_by(userId) %>%
summarize(b_u = sum(rating- mu - b_i)/(n()+l))
genres_avg<-train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
group_by(genres) %>%
summarize(b_g = sum(rating - mu - b_i - b_u)/(n()+l))
predicted_ratings <-
validation %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
RMSE <- rmse(validation$rating,predicted_ratings) ## Small improvement 0.8643
RMSE <- rmse(validation_clean$rating,predicted_ratings) ## Small improvement 0.8643
qplot(lambdas, rmses, fill = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
qplot(lambdas, rmses, fill = I("red")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
qplot(lambdas, rmses, bins = 10, fill = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
qplot(lambdas, rmses, bins=10, fill = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
qplot(lambdas, rmses, bins=12, fill = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
qplot(lambdas, rmses, bins=12, color = I"red",fill = I("deepskyblue4")) +
qplot(lambdas, rmses, bins=12, color = I("red"),fill = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
qplot(lambdas, rmses, bins=12, color = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
qplot(lambdas[0:10], rmses[0:10], bins=12, color = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
qplot(lambdas[0:20], rmses[0:20], bins=12, color = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
## Find RSME in not penalized model predictions
RSME_notPenalized = rsme(validation_clean$rating, predicted_ratings_noPenalized)
## Find RSME in not penalized model predictions
RSME_notPenalized = rmse(validation_clean$rating, predicted_ratings_noPenalized)
## Find RSME in not penalized model predictions
RSME_penalized = rmse(validation_clean$rating, predicted_ratings_penalized)
# --------------------------------------------------------------
## Now using penalized least squares, with penalty term Lambda
# --------------------------------------------------------------
lambdas <- seq(0, .5, 0.05)
mu <- mean(train_set$rating)
# In order to evaluate the best lambda we need to iterate across many values of lambdas
# and get our final model. This may take a little if seq(0, 3, .05) or larger is used, so I cut it to 0-.5, to appreciate RMSE variation on future plot.
rmses <- sapply(lambdas, function(l){
# Pretty same as before but we and a division to n() + l
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
user_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId')%>%
group_by(userId) %>%
summarize(b_u = sum(rating- mu - b_i)/(n()+l))
genres_avg<-train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
group_by(genres) %>%
summarize(b_g = sum(rating - mu - b_i - b_u)/(n()+l))
predicted_ratings <-
train_set %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avg, by='userId') %>%
left_join(genres_avg, by='genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings <- predicted_ratings %>%
mutate(pred = if_else(pred>5,5,if_else(pred<0,0,pred))) %>%
pull(pred)
# We use train rating, as in this part we are still training the model.
return (rmse(train_set$rating,predicted_ratings))
})
lambda <- lambdas[which.min(rmses)] # Best Lambda is 4.75
# Now we construct or final model with the given lambda and apply it to
# the validation data.
#Final model will be
l <- lambda
# Movie Component
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu) / (n() + l))
# User Component
user_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
group_by(userId) %>%
summarize(b_u = sum(rating - mu - b_i) / (n() + l))
# Genres Component
genres_avg <- train_set %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
group_by(genres) %>%
summarize(b_g = sum(rating - mu - b_i - b_u) / (n() + l))
# Make our final prediction with the validation data
predicted_ratings <-
validation_clean %>%
left_join(movie_avgs, by = 'movieId') %>%
left_join(user_avg, by = 'userId') %>%
left_join(genres_avg, by = 'genres') %>%
mutate(pred = mu + b_i + b_u + b_g) %>%
select(pred)
predicted_ratings_penalized <- predicted_ratings %>%
mutate(pred = if_else(pred > 5, 5, if_else(pred < 0, 0, pred))) %>%
pull(pred)
qplot(lambdas, rmses, bins=12, color = I("deepskyblue4")) +
labs(title = "Lambda vs RMSE variation",
x = "Lambda value",
y = "RSME obtained",
caption = "Figure 5. Variation of RMSE according to the penalized term lambda used")+
theme(
plot.caption = element_text(size = captionSize, hjust = 0),
plot.title = element_text(size = titleSize, hjust = .5))
## Find RSME in not penalized model predictions
RSME_notPenalized = rmse(validation_clean$rating, predicted_ratings_noPenalized)
## Find RSME in not penalized model predictions
RSME_penalized = rmse(validation_clean$rating, predicted_ratings_penalized)
## Find RSME in not penalized model predictions
RSME_notPenalized = rmse(validation_clean$rating, predicted_ratings_noPenalized)
## Find RSME in not penalized model predictions
RSME_penalized = rmse(validation_clean$rating, predicted_ratings_penalized)
## Now showing the result
RSME_notPenalized
RSME_penalized
## Find RSME in not penalized model predictions
RSME_notPenalized = rmse(validation_clean$rating, predicted_ratings_noPenalized)
## Find RSME in not penalized model predictions
RSME_penalized = rmse(validation_clean$rating, predicted_ratings_penalized)
## Now showing the result
RSME_notPenalized
RSME_penalized
## Find RSME in not penalized model predictions
RSME_notPenalized = rmse(validation_clean$rating, predicted_ratings_noPenalized)
## Find RSME in not penalized model predictions
RSME_penalized = rmse(validation_clean$rating, predicted_ratings_penalized)
## Now showing the result
RSME_notPenalized
RSME_penalized
rmarkdown::render("movieRatingReport.Rmd", clean = FALSE)
rmarkdown::render("movieRatingReport.Rmd", clean = FALSE)
## Find RSME in not penalized model predictions
RSME_notPenalized <- rmse(validation_clean$rating, predicted_ratings_noPenalized)
## Find RSME in not penalized model predictions
RSME_penalized <- rmse(validation_clean$rating, predicted_ratings_penalized)
## Now showing the result
RSME_notPenalized
RSME_penalized
rmarkdown::render("movieRatingReport.Rmd", clean = FALSE)
